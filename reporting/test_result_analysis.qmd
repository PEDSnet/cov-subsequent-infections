---
title: "Subsequent Infections - Test Panel Result Analysis "
date: "`r format(Sys.time(), '%m-%d-%y')`"
output:
  html_document:
    df_print: paged
    toc: yes
    toc_collapsed: yes
    toc_float: yes
---

Analysis of test panel results by site, in cohort entry period, how many positive/negative pairs of tests are there (i.e. covid, influenza, RSV same day)

```{r setup, include=FALSE}
# Default taken from R notebook behavior: when knitting, wd will always be location of notebook
base_dir <- '..'
Sys.setenv(PEDSNET_SKIP_REQUEST_EXECUTION=1)
try(source('../site/run.R')) # May not be able to make db connection
#try(source('site/run.R'))

# Set to "local" to read data from ../results, or another value to read from db
data_source <- if_else(config('execution_mode') == 'distribution', 'local', 'not_local')

require(tibble)
require(knitr)
require(kableExtra)
require(readr)
require(table1)
require(ggplot2)
library(GGally)
require(tidyverse)
require(lubridate)
library(wesanderson)
library(survey)
library(survival)
library(WeightIt)
library(cobalt)
library(jtools)
require(cobalt)
require(WeightIt)
require(scattermore)
require(broom)
require(broom.mixed)
require(tableone)

get_results <- function(tbl_name) {
  if (data_source == 'local') {
    rslt <- read_csv(paste0('../results/', tbl_name, '.csv'))
  }
  else {
    rslt <- results_tbl(tbl_name) %>% collect()
  }
  rslt
}


prettify_kable <- function(data, indents = list()) {
  
  if (length(indents)==0) {
      data %>% 
        kbl(digits = 2, format.args = list(big.mark = ',')) %>%
        kable_classic(full_width = F, html_font = "Arial") %>% 
        kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>% 
        column_spec(1, bold = F, border_right = T)
  } else {
      data %>% 
        kbl(digits = 2, format.args = list(big.mark = ',')) %>%
        kable_classic(full_width = F, html_font = "Arial") %>% 
        kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>% 
        add_indent(indents) %>% 
        column_spec(1, bold = F, border_right = T)
  }

  # 
  # data %>% 
  #   kable(digits = 2, format.args = list(big.mark = ',')) %>% 
  #   kable_styling(bootstrap_options = c("striped", "hover")) %>% 
  #   column_spec(1, bold = T, border_right = T)
}

my.render.cont <- function(x) {
  with(stats.apply.rounding(stats.default(x), digits = 6), c("",
    "Mean (SD)" = sprintf("%0.1f (%0.1f)", as.numeric(MEAN), as.numeric(SD)),
    "Median [Q1-Q3]" = sprintf("%0.1f [%0.1f - %0.1f]", as.numeric(MEDIAN), as.numeric(Q1), as.numeric(Q3))
  ))
}

my.render.cat <- function(x) {
  c("", sapply(stats.default(x), function(y) {
    with(
      y,
      sprintf("%s (%0.1f%%)", format(FREQ, big.mark = ","), PCT)
    )
  }))
}

pvalue <- function(x, ...) {
  # Construct vectors of data y, and groups (strata) g
  # from https://cran.r-project.org/web/packages/table1/vignettes/table1-examples.html#example-a-column-of-p-values

  y <- unlist(x)
  g <- factor(rep(1:length(x), times = sapply(x, length)))
  if (is.numeric(y)) {
    # For numeric variables, perform a standard 2-sample t-test
    p <- t.test(y ~ g)$p.value
  } else {
    # For categorical variables, perform a chi-squared test of independence
    p <- chisq.test(table(y, g))$p.value
  }
  # Format the p-value, using an HTML entity for the less-than sign.
  # The initial empty string places the output on the line below the variable label.
  c("", sub("<", "&lt;", format.pval(p, digits = 3, eps = 0.001)))
}

# fron https://rdrr.io/github/junkka/ehahelper/src/R/broom_coxme.R
tidy.coxme <- function(x, exponentiate = FALSE, conf.int = 0.95, ...) {
  beta <- x$coefficients
  nvar <- length(beta)
  nfrail <- nrow(x$var) - nvar
  nn <- c("estimate", "exp()", "std.error", "statistic", "p.value")
  se <- sqrt(diag(as.matrix(x$var))[nfrail + 1:nvar])
  z <- qnorm((1 + conf.int) / 2, 0, 1)
  ret <- data.frame(
    "term" = names(beta),
    "estimate" = beta,
    "std.error" = se,
    "statistic" = beta / se,
    "p.value" = 1 - pchisq((beta / se)^2, 1),
    "conf.low" = beta - z * se,
    "conf.high" = beta + z * se,
    "beta" = beta
  )
  if (exponentiate) {
    ret$estimate <- exp(ret$estimate)
    ret$conf.low <- exp(ret$conf.low)
    ret$conf.high <- exp(ret$conf.high)
  }
  rownames(ret) <- c(1:nrow(ret))
  ret
}
```

```{r data_RSV, include = FALSE, echo=FALSE, message=FALSE, warning=FALSE}
postacute_min_start_date = as.Date("2022-04-01")
postacute_max_end_date = as.Date("2023-01-01")

cohort_entry_start_date = as.Date("2022-03-01")
cohort_entry_end_date = as.Date("2022-07-01")

cohort_1_label = "rsv_study_cohort"

comparison_group_string = "Influenza"


analytic_dataset <-
  results_tbl(paste0(cohort_1_label, "_analytic_dataset_highrisk")) %>% 
  filter(ce_date >= cohort_entry_start_date,
         ce_date < cohort_entry_end_date)

analytic_dataset_final <-
  analytic_dataset %>% 
  filter(sex_cat != "Other/unknown") %>% 
  filter(is.na(covid_index_date_imputed) | covid_index_date_imputed==0) %>% 
  group_by(person_id) %>% 
  mutate(exclude = max(exclude_for_prior_rsv)) %>% 
  filter(exclude < 1) %>%
  slice_min(rsv_evidence_date, with_ties=FALSE) %>% 
  ungroup() %>% 
  mutate(lab_confirmed_index = ifelse(lab_confirmed==1, "lab confirmed", "dx only")) %>% 
  mutate(lab_confirmed_rsv_outcome = ifelse(lab_confirmed_rsv==1, "lab confirmed RSV", "dx only")) %>% 
  # mutate(visit_span_criteria_rank = as.character(visit_span_criteria_rank)) %>% 
  mutate(hospitalized_at_index = ifelse(hospital_flag==1 & visit_span_criteria_rank=="1", "Hospitalized", "Not hospitalized")) %>% 
  mutate(hospital_flag = as.character(hospital_flag)) %>% 
  mutate(hosp_with_vent = as.character(hosp_with_vent)) %>% 
  mutate(hospitalized_at_index = ifelse(is.na(hospitalized_at_index), "Not hospitalized", hospitalized_at_index)) %>% 
  mutate(hosp_with_vent = ifelse(is.na(hosp_with_vent), "0", hosp_with_vent))  %>% 
  mutate(hospitalized_at_index_detail = ifelse(hospitalized_at_index=="Hospitalized" & hosp_with_vent=="1", "Hospitalized with ventilation", hospitalized_at_index)) %>% collect() %>%
  mutate(pulmonary_respiratory = as.factor(pulmonary_respiratory),
          highrisk_flag = if_else(highrisk_flag, "Yes", "No"))


visit_counts <- results_tbl(paste0(cohort_1_label, "_visit_lookback_counts")) %>% 
  collect()

```

```{r data_resp, echo = FALSE, output = FALSE, message = FALSE , warning = FALSE}
postacute_min_start_date_resp = as.Date("2021-07-01")
postacute_max_end_date_resp = as.Date("2023-03-01")
  
cohort_entry_start_date_resp = as.Date("2021-06-01")
cohort_entry_end_date_resp = as.Date("2023-01-01")
cohort_entry_end_date_resp = as.Date("2022-10-01")
  
cohort_1_label_resp = "resp_study_cohort"


# description = "covid_flu_3"
# description = "covid_flu_noutil"
# description = "covid_flu_util"
# description = "covid_ari_util"
# description = "covid_ari_ce_week"
# description = "covid_flu_nonexclude"

description_resp = "covid_flu_comparison"
# description = "covid_ari_comparison"
# comparison_group_string = "Respiratory"
comparison_group_string_resp = "Influenza"


analytic_dataset_resp <-
  results_tbl(paste0(cohort_1_label_resp, "_analytic_dataset")) %>% 
  filter(ce_date >= cohort_entry_start_date_resp,
         ce_date < cohort_entry_end_date_resp)

analytic_dataset_final_resp <-
  analytic_dataset_resp %>% 
  filter(sex_cat != "Other/unknown") %>% 
  filter(is.na(covid_index_date_imputed) | covid_index_date_imputed==0) %>% 
  group_by(person_id) %>% # TODO might need to filter earliest resp date or something
  ungroup() %>% 
  mutate(lab_confirmed_index = ifelse(lab_confirmed==1, "lab confirmed", "dx only")) %>% 
  # mutate(visit_span_criteria_rank = as.character(visit_span_criteria_rank)) %>% 
  mutate(hospitalized_at_index = if_else(hospital_flag==1 & visit_span_criteria_rank=="1", "Yes","No")) %>% 
  mutate(hospital_flag = as.character(hospital_flag)) %>% 
  mutate(hosp_with_vent = as.character(hosp_with_vent)) %>% 
  mutate(hospitalized_at_index = if_else(is.na(hospitalized_at_index), "No", hospitalized_at_index)) %>% 
  mutate(hosp_with_vent = ifelse(is.na(hosp_with_vent), "0", hosp_with_vent))  %>% 
  mutate(hospitalized_at_index_detail = ifelse(hospitalized_at_index== "Yes" & hosp_with_vent=="1", "Hospitalized with ventilation", hospitalized_at_index)) %>% 
  mutate(resp_outcome_is_reinfection = case_when(resp_outcome_flu_related=="x" & sub_cohort=="Influenza" ~ "1",
                                                 outcome_covid30d=="1" & sub_cohort=="COVID" ~ "1",
                                                 TRUE ~ "0")) %>% 
  # mutate(rsv_outcome_postacute = ifelse(rsv_occurrence_period == "post acute (15-180 days after index)", 1, 0)) %>% 
  collect()

visit_counts_resp <- results_tbl(paste0(cohort_1_label_resp, "_visit_lookback_counts")) %>%
  collect()

```

# Test panel by sites for flu, covid, rsv: 
```{r test_panel_data, echo = FALSE, message = FALSE , warning = FALSE}
###### Anchor dates for conditions
postacute_min_start_date = as.Date("2022-02-01")
postacute_max_end_date = as.Date("2023-01-01")

cohort_entry_start_date = as.Date("2022-01-01")
cohort_entry_end_date = as.Date("2022-07-01")

description = "covid_flu_nonexclude"

cohort_group <- results_tbl( paste0(description,'_tabc')) 

test_panels <- results_tbl("cohort_test_panels") %>% 
  left_join(cohort_group %>% filter(lab_confirmed_rsv==1, days_from_index_to_rsv==0) %>%
              select(person_id, ce_date) %>% 
              mutate(pid=row_number()), by="person_id") %>% 
  mutate(days_between = ((as.numeric(measurement_date - ce_date)))) %>% 
  group_by(person_id) %>% 
  mutate(max_days_between = max(abs(days_between))) %>% 
  ungroup() %>% 
  mutate(max_group = max_days_between %% 4) %>% 
  filter(abs(days_between) <= 30)

panel_summaries <- results_tbl("test_panel_aws_summaries_cohort")

print(test_panels %>% ggplot() +
  geom_line(aes(x=days_between, y = pid, group=pid))  +
  geom_point(aes(x=days_between, y = pid, group=pid, color=panel_value))  +
  facet_wrap(~max_group, scales="free"))

```


```{r test_panel_by_sites, echo = FALSE, message = FALSE , warning = FALSE, page.print = FALSE}
panel_summary <- results_tbl("cohort_test_panels") %>% 
              mutate(across(ends_with("value_as_concept_id"), ~if_else(is.na(.x) | .x == "NA or other" | .x == "NA","No results", .x ))) %>%
              mutate(flu_test = paste0("flu_", flu_value_as_concept_id)) %>%
  mutate(covid_test = paste0("covid_", covid_value_as_concept_id)) %>%
  mutate(rsv_test = paste0("rsv_", rsv_value_as_concept_id))%>% 
  pivot_longer(cols = c("flu_test", "rsv_test","covid_test"), names_to = "type", values_to ="results")%>%
  group_by(site, type, results) %>% 
  summarise(n = n()) %>% ungroup() %>%
  group_by(site) %>% mutate(total_test = sum(n))%>% ungroup() %>%
  select(-type)%>%
  pivot_wider(names_from = results, values_from = c("n"), id_cols = c("site", "total_test")) 
panel_summary %>% prettify_kable()
```

# Temporal trend of test results by participating sites
```{r test_panel_by_sites_temporal, echo = FALSE, message = FALSE , warning = FALSE}
p <- panel_summaries %>% 
  filter(!panel_value=="Cov: No test evidence, Flu: No test evidence, RSV: No test evidence") %>% 
  # filter(site=="chop") %>% 
  # filter(person_id == 53606) %>% 
  # filter(panel_value %in% c(
  #   "Cov: Positive, Flu: Positive, RSV: Positive",
  #   "Cov: Positive, Flu: Positive, RSV: No test evidence",
  #   "Cov: No test evidence, Flu: Positive, RSV: No test evidence",
  #   "Cov: No test evidence, Flu: Positive, RSV: Positive",
  #   "Cov: No test evidence, Flu: No test evidence, RSV: Positive",
  #   "Cov: Positive, Flu: No test evidence, RSV: Positive",
  #   "Cov: Negative, Flu: No test evidence, RSV: No test evidence",
  #   "Cov: No test evidence, Flu: Negative, RSV: No test evidence",
  #   "Cov: No test evidence, Flu: No test evidence, RSV: Negative"
  # )) %>% 
  ggplot() +
  geom_bar(aes(x=measurement_date, y = fraction_with_value, fill = panel_value), 
           stat="identity", 
           position="stack") +
  facet_wrap(~site, ncol = 4) +
  theme_bw() 

  leg <- get_legend(p)  
  p + theme(legend.position = "None")
  
```
![test]("/figures/temporal_test_trend.png")

![test]("/figures/temporal_test_trend_legend.png")

```{r legends, fig.width= 15, fig.height=10}
as_ggplot(leg)
```

```{r new}
analytic_dataset_final_resp%>% select
```





